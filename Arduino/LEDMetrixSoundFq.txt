#include <FastLED.h>
#include <arduinoFFT.h>

#define LED_PIN     6
#define NUM_LEDS    91 // 13 columns * 7 rows
#define LED_TYPE    WS2812B
#define COLOR_ORDER GRB
#define ANALOG_PIN  A0 // Change this to your audio input pin
#define SAMPLES     64 // Number of samples for FFT. Higher samples give better resolution but slower speed
#define SAMPLING_FREQUENCY 1000 // Max frequency able to read is half this value

CRGB leds[NUM_LEDS];

unsigned int sampling_period_us;
unsigned long microseconds;

double vReal[SAMPLES];
double vImag[SAMPLES];

arduinoFFT FFT = arduinoFFT();

void setup() {
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  sampling_period_us = round(1000000*(1.0/SAMPLING_FREQUENCY));
}

void loop() {
  /* Sampling */
  for(int i=0; i<SAMPLES; i++) {
    microseconds = micros();    //Overflows after around 70 minutes!

    vReal[i] = analogRead(ANALOG_PIN);
    vImag[i] = 0;

    //Wait until sampling period ends
    while(micros() < (microseconds + sampling_period_us)){
      // do nothing to wait out the sample period
    }
  }

  /* FFT */
  FFT.Windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
  FFT.Compute(vReal, vImag, SAMPLES, FFT_FORWARD);
  FFT.ComplexToMagnitude(vReal, vImag, SAMPLES);

  for (int i = 0; i < 13; i++) {
    int val = constrain((int)vReal[i] / 4, 0, 7); // Get the magnitude of the audio frequency

    for (int j = 0; j < 7; j++) {
      if (j < val) {
        leds[i*7 + j] = CRGB::Red; // Light up the LED
      } else {
        leds[i*7 + j] = CRGB::Black; // Turn off the LED
      }
    }
  }
  FastLED.show(); // Update LEDs
}